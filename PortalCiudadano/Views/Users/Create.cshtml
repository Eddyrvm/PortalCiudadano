@model PortalCiudadano.Models.User

@{
    ViewBag.Title = "Registro";
}

<link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.all.min.js"></script>

@using (Html.BeginForm("Create", "Users", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="container">
        <br />
        <h6>
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="#6f42c1" class="bi bi-info-circle-fill" viewBox="0 0 16 16" style="margin-bottom: 3px;">
                <path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.93-9.412-1 4.705c-.07.34.029.533.304.533.194 0 .487-.07.686-.246l-.088.416c-.287.346-.92.598-1.465.598-.703 0-1.002-.422-.808-1.319l.738-3.468c.064-.293.006-.399-.287-.47l-.451-.081.082-.381 2.29-.287zM8 5.5a1 1 0 1 1 0-2 1 1 0 0 1 0 2" />
            </svg> Para inciar el registro debes digitar la cédula o RUC y presionar el boton "Cargar datos del solicitante"
        </h6>

        <div class="form-group">
            <input type="text" id="Identificador" class="form-control d-inline-flex mb-1" placeholder="Ingrese la cédula o RUC" />
            <button type="button" id="BuscarPersonaBtn" class="btn btn-warning mb-1">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-person-check" viewBox="0 0 16 16" style="margin-bottom: 5px;">
                    <path d="M12.5 16a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7m1.679-4.493-1.335 2.226a.75.75 0 0 1-1.174.144l-.774-.773a.5.5 0 0 1 .708-.708l.547.548 1.17-1.951a.5.5 0 1 1 .858.514M11 5a3 3 0 1 1-6 0 3 3 0 0 1 6 0M8 7a2 2 0 1 0 0-4 2 2 0 0 0 0 4" />
                    <path d="M8.256 14a4.5 4.5 0 0 1-.229-1.004H3c.001-.246.154-.986.832-1.664C4.484 10.68 5.711 10 8 10q.39 0 .74.025c.226-.341.496-.65.804-.918Q8.844 9.002 8 9c-5 0-6 3-6 4s1 1 1 1z" />
                </svg> Cargar datos del solicitante
            </button>
            <!-- Spinner de tipo botón -->
            <button id="SpinnerButton" class="btn btn-primary d-none mb-1" type="button" disabled>
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                <span class="visually-hidden">Loading...</span>
            </button>
        </div>


        <input type="hidden" id="PersonaId" name="PersonaId" />

        <div id="PersonaInfo" class="mt-3 col-7" style="display:none;">
            <p class="mb-1 alert alert-success">
                <strong>Nombre:</strong> <span id="NombrePersona"></span>--
                <strong>Cédula:</strong> <span id="IdentificadorPersona"></span>
            </p> <!-- Mostrar el Identificador -->
        </div>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="row">
            <!-- Card de Datos Personales -->
            <div class="col-12 col-md-6">
                <br />
                <div class="card shadow">
                    <div class="card-body">
                        <fieldset>
                            <legend>
                                <svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" fill="#0dcaf0" class="bi bi-file-earmark-person" viewBox="0 0 16 16" style="margin-bottom: 4px;">
                                    <path d="M11 8a3 3 0 1 1-6 0 3 3 0 0 1 6 0" />
                                    <path d="M14 14V4.5L9.5 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2M9.5 3A1.5 1.5 0 0 0 11 4.5h2v9.255S12 12 8 12s-5 1.755-5 1.755V2a1 1 0 0 1 1-1h5.5z" />
                                </svg> Datos Personales
                            </legend>

                            <div class="form-group">
                                @Html.LabelFor(model => model.Cedula, htmlAttributes: new { @class = "control-label" })
                                @Html.EditorFor(model => model.Cedula, new { htmlAttributes = new { @class = "form-control", @id = "Cedula", @readonly = "readonly" } })
                                @Html.ValidationMessageFor(model => model.Cedula, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.Nombres, htmlAttributes: new { @class = "control-label" })
                                @Html.EditorFor(model => model.Nombres, new { htmlAttributes = new { @class = "form-control", @id = "Nombres", @readonly = "readonly" } })
                                @Html.ValidationMessageFor(model => model.Nombres, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.Apellidos, htmlAttributes: new { @class = "control-label" })
                                @Html.EditorFor(model => model.Apellidos, new { htmlAttributes = new { @class = "form-control", @id = "Apellidos", @readonly = "readonly" } })
                                @Html.ValidationMessageFor(model => model.Apellidos, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.Telefono, htmlAttributes: new { @class = "control-label" })
                                @Html.EditorFor(model => model.Telefono, new { htmlAttributes = new { @class = "form-control", @id = "Telefono", @readonly = "readonly" } })
                                @Html.ValidationMessageFor(model => model.Telefono, "", new { @class = "text-danger" })
                            </div>

                            <div class="mb-3">
                                <label for="FotoFile" class="form-label">@Html.DisplayNameFor(model => model.FotoFile)</label>
                                @Html.TextBoxFor(model => model.FotoFile, new { @class = "form-control", type = "file", id = "FotoFile" })
                            </div>
                        </fieldset>
                    </div>
                </div>
            </div>
            <!-- Card de Credenciales -->
            <div class="col-12 col-md-6">
                <br />
                <div class="card shadow">
                    <div class="card-body">
                        <fieldset>
                            <legend>
                                <svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" fill="#6f42c1" class="bi bi-file-earmark-lock2" viewBox="0 0 16 16" style="margin-bottom: 4px;">
                                    <path d="M10 7v1.076c.54.166 1 .597 1 1.224v2.4c0 .816-.781 1.3-1.5 1.3h-3c-.719 0-1.5-.484-1.5-1.3V9.3c0-.627.46-1.058 1-1.224V7a2 2 0 1 1 4 0M7 7v1h2V7a1 1 0 0 0-2 0" />
                                    <path d="M14 14V4.5L9.5 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2M9.5 3A1.5 1.5 0 0 0 11 4.5h2V14a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h5.5z" />
                                </svg> Credenciales
                            </legend>

                            <div class="form-group">
                                @Html.LabelFor(model => model.UserName, htmlAttributes: new { @class = "control-label" })
                                @Html.EditorFor(model => model.UserName, new { htmlAttributes = new { @class = "form-control", @id = "UserName", @readonly = "readonly" } })
                                @Html.ValidationMessageFor(model => model.UserName, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label" })
                                @Html.PasswordFor(model => model.Password, new { @class = "form-control", @type="password" })
                                @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.ConfirmPassword, htmlAttributes: new { @class = "control-label" })
                                @Html.PasswordFor(model => model.ConfirmPassword, new { @class = "form-control", @type = "password" })
                                @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })
                            </div>
                        </fieldset>
                    </div>
                </div>
            </div>
        </div>

        <br />
        <div class="form-group">
            <div class="text-center">
                @if (User.IsInRole("Admin"))
                {
                    <a class="btn btn-secondary mb-1" title="Volver al formulario" href="@Url.Action("Index", "Users")">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-reply" viewBox="0 0 16 16" style="margin-bottom: 4px;">
                            <path d="M6.598 5.013a.144.144 0 0 1 .202.134V6.3a.5.5 0 0 0 .5.5c.667 0 2.013.005 3.3.822.984.624 1.99 1.76 2.595 3.876-1.02-.983-2.185-1.516-3.205-1.799a8.7 8.7 0 0 0-1.921-.306 7 7 0 0 0-.798.008h-.013l-.005.001h-.001L7.3 9.9l-.05-.498a.5.5 0 0 0-.45.498v1.153c0 .108-.11.176-.202.134L2.614 8.254l-.042-.028a.147.147 0 0 1 0-.252l.042-.028zM7.8 10.386q.103 0 .223.006c.434.02 1.034.086 1.7.271 1.326.368 2.896 1.202 3.94 3.08a.5.5 0 0 0 .933-.305c-.464-3.71-1.886-5.662-3.46-6.66-1.245-.79-2.527-.942-3.336-.971v-.66a1.144 1.144 0 0 0-1.767-.96l-3.994 2.94a1.147 1.147 0 0 0 0 1.946l3.994 2.94a1.144 1.144 0 0 0 1.767-.96z" />
                        </svg> Volver a la lista
                    </a>
                }
                    <a class="btn btn-danger mb-1" title="Volver al formulario" href="@Url.Action("Index", "Home")">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-x-circle" viewBox="0 0 16 16">
                            <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14m0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16" />
                            <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708" />
                        </svg> Cancelar
                    </a>
                    <button type="submit" class="btn btn-primary mb-1">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-person-plus" viewBox="0 0 16 16">
                            <path d="M6 8a3 3 0 1 0 0-6 3 3 0 0 0 0 6m2-3a2 2 0 1 1-4 0 2 2 0 0 1 4 0m4 8c0 1-1 1-1 1H1s-1 0-1-1 1-4 6-4 6 3 6 4m-1-.004c-.001-.246-.154-.986-.832-1.664C9.516 10.68 8.289 10 6 10s-3.516.68-4.168 1.332c-.678.678-.83 1.418-.832 1.664z" />
                            <path fill-rule="evenodd" d="M13.5 5a.5.5 0 0 1 .5.5V7h1.5a.5.5 0 0 1 0 1H14v1.5a.5.5 0 0 1-1 0V8h-1.5a.5.5 0 0 1 0-1H13V5.5a.5.5 0 0 1 .5-.5" />
                        </svg> Registrar usuario en el sistema
                    </button>
                </div>
        </div>
    </div>
}

@section scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        $(document).ready(function () {
            $('#BuscarPersonaBtn').click(function () {
                const identificador = $('#Identificador').val();
                const urlDeudas = '@Url.Action("BuscarPersonaPorIdentificador")';
                const urlPersona = '/Users/GetPersona';

                if (!identificador || isNaN(identificador)) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Debe ingresar un número válido de cédula o RUC.'
                    });
                    return;
                }

                // Mostrar el spinner y ocultar el botón de búsqueda
                $('#SpinnerButton').removeClass('d-none');
                $('#BuscarPersonaBtn').addClass('d-none');

                // Primer script: Buscar deudas
                $.ajax({
                    url: urlDeudas,
                    type: 'GET',
                    data: { identificador: identificador },
                    success: function (response) {
                        let deudasPromise;

                        if (response.success) {
                            if (response.deudas && response.deudas.ListComp.length > 0) {
                                let deudasInfo = `
                                    <strong>Información de Deudas:</strong><br>
                                    <strong>Componentes:</strong>
                                `;
                                let totalValor = 0;
                                response.deudas.ListComp.forEach(function (comp) {
                                    totalValor += comp.Valor;
                                    deudasInfo += `
                                        <div style="margin-bottom: 10px;">
                                            <strong>Rubro:</strong> ${comp.NombreMiembro}<br>
                                            <strong>Valor:</strong> $${comp.Valor.toFixed(2)}<br>
                                            <hr style="border: 1px solid #ccc;">
                                        </div>
                                    `;
                                });
                                deudasInfo += `
                                    <div style="margin-top: 5px;">
                                        <hr style="border: 1px solid #ccc;">
                                        <strong>Total (USD):</strong> $${totalValor.toFixed(2)}<br>
                                        <hr style="border: 1px solid #ccc;">
                                    </div>
                                `;
                                deudasPromise = Swal.fire({
                                    title: 'El usuario posee valores pendientes.',
                                    html: deudasInfo,
                                    icon: 'info',
                                    confirmButtonText: 'Aceptar'
                                });
                            } else {
                                deudasPromise = Swal.fire({
                                    title: 'Sin Deudas',
                                    text: "No se encontraron deudas para esta persona.",
                                    icon: 'info',
                                    confirmButtonText: 'Aceptar'
                                });
                            }
                        } else {
                            deudasPromise = Swal.fire({
                                title: 'Sin Deuda',
                                text: response.message,
                                icon: 'info',
                                confirmButtonText: 'Aceptar'
                            });
                        }

                        // Esperar hasta que el usuario cierre el mensaje antes de continuar
                        deudasPromise.then(() => {
                            // Segundo script: Buscar persona
                            $.ajax({
                                url: urlPersona,
                                type: 'GET',
                                data: { identificador: identificador },
                                success: function (response) {
                                    if (response) {
                                        // Llenar los campos con los datos recibidos
                                        $('#Cedula').val(response.identificador);
                                        $('#Nombres').val(response.natural_nombres);
                                        $('#Apellidos').val(response.natural_apellidos);
                                        $('#Telefono').val(response.telefono);
                                        $('#UserName').val(response.email);

                                        Swal.fire({
                                            icon: 'success',
                                            title: 'Persona encontrada',
                                            text: 'Los datos han sido cargados correctamente, por favor elige una contraseña y procede confirmando la contraseña'
                                        });
                                    } else {
                                        Swal.fire({
                                            icon: 'error',
                                            title: 'No encontrado',
                                            text: 'No se encontraron datos para el identificador proporcionado.'
                                        });
                                    }
                                },
                                error: function () {
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Error',
                                        text: 'Ocurrió un problema al buscar la persona. Inténtelo nuevamente.'
                                    });
                                },
                                complete: function () {
                                    // Ocultar el spinner y mostrar el botón de búsqueda
                                    $('#SpinnerButton').addClass('d-none');
                                    $('#BuscarPersonaBtn').removeClass('d-none');
                                }
                            });
                        });
                    },
                    error: function () {
                        Swal.fire({
                            title: 'Error',
                            text: "Ocurrió un error al buscar la persona.",
                            icon: 'error',
                            confirmButtonText: 'Aceptar'
                        });

                        // Ocultar el spinner y mostrar el botón de búsqueda
                        $('#SpinnerButton').addClass('d-none');
                        $('#BuscarPersonaBtn').removeClass('d-none');
                    }
                });
            });
        });
    </script>
}


